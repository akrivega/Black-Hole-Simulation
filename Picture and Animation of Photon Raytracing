import numpy as np
import matplotlib.pyplot as plt
from math import sqrt, pi
import matplotlib
from matplotlib.animation import FuncAnimation
matplotlib.rcParams['animation.embed_limit'] = 2**128
plt.rcParams['animation.html'] = 'jshtml' #IMPORTANT FOR BETTER VIEW 

step_dphi = 10**(-3)

def dr_dphi(r, r_s, b):
    '''dr/dphi
    '''
    return r*sqrt((r/b)**2 - (1 - (r_s/r)))

def new_radius(r, r_s, b):
    '''1 step after r_0 = r'''
    return r + dr_dphi(r, r_s, b) * step_dphi

def new_phi(phi):
    '''1 step after phi_0 = phi'''
    return phi + step_dphi

def iterate_radius_phi(r, phi, r_s, b, number):
    ''' iterates r and phi a certain amount of times'''
    
    data_radius = [r] #initial condition
    phi_data = [phi] #initial condition
    '''lists to store the iterations'''
    for step in range(number): 
        data_radius.append(new_radius(data_radius[step], r_s, b))
    for step in range(number):
        phi_data.append(new_phi(phi_data[step]))
        
    return np.array([data_radius, phi_data]) #first element is radius and 2nd is phi
def combine_arrays(array1, array2):
    '' array1 = [[r],[phi]]
    where r, phi = [],[] append the first array to 
    include both array1 and array2
    incoming photon and the outgoing photon are plotted as
    as (r,phi) = (r1,phi1)&(-r2,phi2)'''
    r_i = array1[0][::-1]
    phi_i = array1[1][::-1]
    r_o = array2[0]
    phi_o = -array2[1] + 2*np.pi
    
    for r in r_o:
        r_i = np.append(r_i, r)
        r_new = r_i 
    for phi in phi_o: 
        phi_i = np.append(phi_i, phi)
        phi_new = phi_in
    return np.array([r_new, phi_new])
    
#DATA TO PLOT credit to Edgar Vidal
plot0 = iterate_radius_phi(1.01, .967*np.pi, 1 ,.1, 95).  
plot1 = iterate_radius_phi(1.01, 5.027/6 *np.pi, 1 , 0.5, 450)

plot2 = iterate_radius_phi(1.01, 4/6*np.pi, 1 ,1, 930)
plot3 = iterate_radius_phi(1.01, 4.703/5*np.pi/2, 1 ,1.5, 1510)
plot4 = iterate_radius_phi(1.01, 1.18/6*np.pi, 1 ,2, 2300)
plot5 = iterate_radius_phi(1.01, 6.161/5*np.pi, 1 ,2.598, 11550)
loop = np.array([r_loop[::-1],phi_loop[::-1]])
plot6l= iterate_radius_phi(2.2267, .228*np.pi, 1 ,3, 2125)
plot6r = iterate_radius_phi(2.2267, -.2356*np.pi, 1 ,3,2125)
plot7l = iterate_radius_phi(2.8087, .325*np.pi, 1 ,3.5,1800)
plot7r = iterate_radius_phi(2.8087, -.325*np.pi, 1 ,3.5,1800)
plot8l = iterate_radius_phi(3.351, .375*np.pi, 1 ,4,1600)
plot8r = iterate_radius_phi(3.351, -.375*np.pi, 1 ,4,1600)
plot9l = iterate_radius_phi(3.877, 2.40/6*np.pi, 1 ,4.5, 1450)
plot9r = iterate_radius_phi(3.877, -2.40/6*np.pi, 1 ,4.5, 1450)
plot10l = iterate_radius_phi(4.395, 2.50/6*np.pi, 1 ,5,1350)
plot10r = iterate_radius_phi(4.395, -2.50/6*np.pi, 1 ,5,1350)
plot11l = iterate_radius_phi(4.908, 2.57/6*np.pi, 1 ,5.5, 1230)
plot11r = iterate_radius_phi(4.908, -2.57/6*np.pi, 1 ,5.5, 1230)
plot12l = iterate_radius_phi(5.419, 2.66/6*np.pi, 1 ,6, 1130)
plot12r = iterate_radius_phi(5.419, -2.66/6*np.pi, 1 ,6, 1130)
plot13l = iterate_radius_phi(5.927, 2.73/6*np.pi, 1 ,6.5, 1100)
plot13r = iterate_radius_phi(5.927, -2.73/6*np.pi, 1 ,6.5, 1100)
plot14l = iterate_radius_phi(6.433, 2.76/6*np.pi, 1 , 7, 1000)
plot14r= iterate_radius_phi(6.433, -2.76/6*np.pi, 1 , 7, 1000). 

#we need to combine incoming and outcoming photons trajectories, lets create a function to do this
def combine_arrays(array1, array2):
    '''array1 = [[r],[phi]]
    r and phi are both arrays, append the first array to 
    include both array1 and array2
    We plot the incoming photon and the outgoing photon
    as (r,phi) = (r1,phi1)&(-r2,phi2) respectively'''
    r_i = array1[0][::-1]
    phi_i = array1[1][::-1]
    r_o = array2[0]
    phi_o = -array2[1] + 2*np.pi
    
    for r in r_o:
        r_i = np.append(r_i, r)
        r_new = r_i
    for phi in phi_o: 
        phi_i = np.append(phi_i, phi)
        phi_new = phi_i
    return np.array([r_new, phi_new])
plot1_ = np.array([plot1[0], -plot1[1]])
plot2_ = np.array([plot2[0], -plot2[1]])
plot3_ = np.array([plot3[0], -plot3[1]])
plot4_ = np.array([plot4[0], -plot4[1]])
plot6 = combine_arrays(plot6l, plot6r)
plot7 = combine_arrays(plot7l, plot7r)
plot8 = combine_arrays(plot8l, plot8r)
plot9 = combine_arrays(plot9l, plot9r)
plot10 = combine_arrays(plot10l, plot10r)
plot11 = combine_arrays(plot11l, plot11r)
plot12 = combine_arrays(plot12l, plot12r)
plot13 = combine_arrays(plot13l, plot13r)
plot14 = combine_arrays(plot14l, plot14r)

plot0 = iterate_radius_phi(1.01, .999*np.pi, 1 ,.1, 95)
plot0[0][::-1]


# Plotting the picture
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize= (10,8))
ax.set_title('Photon Trajectories', fontsize = 18)
ax.set_xlabel('$\\tilde{r} = \\frac{r}{r_s}$', fontsize = 18)
ax.set_rticks([2,4,6,8])
ax.set_rlabel_position(-22.5)  

ax.plot(plot0[1], plot0[0])
ax.plot(plot1[1],plot1[0]) 
ax.plot(-plot1[1],plot1[0]) 
ax.plot(plot2[1], plot2[0])#, c = 'lightseagreen')
ax.plot(-plot2[1], plot2[0])#, c = 'lightseagreen')
ax.plot(plot3[1],plot3[0]) 
ax.plot(-plot3[1],plot3[0])
ax.plot(plot4[1], plot4[0])#, c = 'crimson')
ax.plot(-plot4[1], plot4[0])#, c = 'crimson')
ax.plot(plot6[1], plot6[0])
ax.plot(plot7[1], plot7[0])
ax.plot(plot8[1], plot8[0])
ax.plot(plot9[1], plot9[0])
ax.plot(plot10[1], plot10[0])
ax.plot(plot11[1], plot11[0])
ax.plot(plot12[1], plot12[0])
ax.plot(plot13[1], plot13[0])
ax.plot(plot14[1], plot14[0])
ax.plot(plot5[1], plot5[0], color = 'darkorchid', label = 'Photon sphere')
ax.plot(loop[1], loop[0], color = 'darkorchid')
ax.plot(0, 0, marker = 'o', color = 'black', markersize = 47.5) #label = 'Within Shwarzchild Radius')
ax.plot(np.linspace(0,2* np.pi,100), np.ones(100),color = 'black')
angle = np.deg2rad(55)
ax.set_rlim(0,9)
plt.savefig('photon_trajectories.png', format = 'png', dpi=160)

'''Animation'''

_plot0 = iterate_radius_phi(1.01, .967*np.pi, 1 ,.1, 95)
_plot1 = np.array([plot1[0][::-1],plot1[1][::-1]])

_plot1_ = np.array([plot1_[0][::-1], plot1_[1][::-1]])
_plot2 = np.array([plot2[0][::-2],plot2[1][::-2]])
_plot2_ = np.array([plot2_[0][::-2], plot2_[1][::-2]])
_plot3 = np.array([plot3[0][::-3], plot3[1][::-3]])
_plot3_ =  np.array([plot3_[0][::-3], plot3_[1][::-3]])
_plot4 = np.array([plot4[0][::-4], plot4[1][::-4]])
_plot4_ = np.array([plot4_[0][::-4], plot4_[1][::-4]])
_plot5 = np.array(plotx5[0][::-4], plot5[1][::-4]])
_loop = np.array([loop[0][::-4], loop[1][::-4]])
_plot6 = np.array([plot6[0][::4], plot6[1][::4]])
_plot7 = np.array([plot7[0][::4], plot7[1][::4]])
_plot8 = np.array([plot8[0][::4], plot8[1][::4]])
_plot9 = np.array([plot9[0][::4], plot9[1][::4]])
_plot10 = np.array([plot10[0][::4], plot10[1][::4]])
_plot11 = np.array([plot11[0][::4], plot11[1][::4]])
_plot12 = np.array([plot12[0][::4], plot12[1][::4]])
_plot13 = np.array([plot13[0][::4], plot13[1][::4]])
_plot14 = np.array([plot14[0][::4], plot14[1][::4]])

def index(array):
    '''Data starts at 9 so come at a similair moment
     we want out lines to start from 0.1 
    and end right before 10
    This function takeS a list arrays_i[r,phi] and 
    the max r = 10'''
    new_data = []
    for ploti in array:
        r_less_than_10 = np.where(ploti[0]<=10)
        new_r = ploti[0][r_less_than_10]
        new_phi = ploti[1][r_less_than_10]
        new_data.append(np.array([new_r, new_phi]))
    return new_data
datas =[_plot0, _plot1, _plot1_,_plot2, _plot2_,_plot3, _plot3_,_plot4,_plot4_ ,_plot5 , _loop,_plot6,_plot7,_plot8,_plot9,_plot0,_plot11,_plot12,_plot13,_plot14]
plot = index(datas)
for r_phi in plot:
    print (len(r_phi[0]))
fig,ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize= (10,8))

for i in datas:
    ax.plot(i[1][:100], i[0][:100])
#ax.set_facecolor('xkcd:purple')
ax.set_rlim(0,9)
ax.plot(0, 0, marker = 'o', color = 'black', markersize = 47) #label = 'Within Shwarzchild Radius')
len(plot)

import matplotlib
matplotlib.rcParams['animation.embed_limit'] = 2**128
plt.rcParams['animation.html'] = 'jshtml' #IMPORTANT FOR BETTER VIEW 

#JAVA HTML  
'''SET UP FIGURE'''
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize= (10,8))
#ax.plot(np.linspace(0,2* np.pi,100), np.ones(100),color = 'black', label = 'Black Hole $r_s$')
ax.set_title('Light Rays in Black Hole', fontsize = 18)
ax.set_xlabel('$\\tilde{r} = \\frac{r}{r_s}$', fontsize = 18)
ax.set_rticks([2,4,6,8])
ax.set_rlabel_position(-22.5) 

angle = np.deg2rad(50)
#ax.legend(loc="lower left",
#          bbox_to_anchor=(.5 + np.cos(angle)/2, .5 + np.sin(angle)/2), fontsize = 12)
'''DONE SETTING UP FIGURE'''
empty_lines = []
for i in np.arange(20):
    line, = ax.plot([],[],)
    empty_lines.append(line,)

def animate(i):
    for j in np.arange(20):
        empty_lines[j].set_data(plot[j][1][:i], plot[j][0][:i])
    return empty_lines
#ANIMATION COMMAND
ax.plot(0, 0, marker = 'o', color = 'black', markersize = 47) #label = 'Within Shwarzchild Radius')

ax.set_rlim(0,9)

#============================================================================
anim = FuncAnimation(fig, animate, frames = 2888 + 2, interval = 5, blit = True)
writervideo = matplotlib.animation.FFMpegWriter(fps=60)
anim.save('test.mp4', writer=writervideo, dpi = 160)
anim
